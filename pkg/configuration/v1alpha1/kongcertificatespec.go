/*
Copyright 2021 Kong, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	commonv1alpha1 "github.com/kong/kubernetes-configuration/v2/api/common/v1alpha1"
)

// KongCertificateSpecApplyConfiguration represents a declarative configuration of the KongCertificateSpec type for use
// with apply.
type KongCertificateSpecApplyConfiguration struct {
	ControlPlaneRef                          *commonv1alpha1.ControlPlaneRef `json:"controlPlaneRef,omitempty"`
	KongCertificateAPISpecApplyConfiguration `json:",inline"`
}

// KongCertificateSpecApplyConfiguration constructs a declarative configuration of the KongCertificateSpec type for use with
// apply.
func KongCertificateSpec() *KongCertificateSpecApplyConfiguration {
	return &KongCertificateSpecApplyConfiguration{}
}

// WithControlPlaneRef sets the ControlPlaneRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControlPlaneRef field is set to the value of the last call.
func (b *KongCertificateSpecApplyConfiguration) WithControlPlaneRef(value commonv1alpha1.ControlPlaneRef) *KongCertificateSpecApplyConfiguration {
	b.ControlPlaneRef = &value
	return b
}

// WithCert sets the Cert field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cert field is set to the value of the last call.
func (b *KongCertificateSpecApplyConfiguration) WithCert(value string) *KongCertificateSpecApplyConfiguration {
	b.KongCertificateAPISpecApplyConfiguration.Cert = &value
	return b
}

// WithCertAlt sets the CertAlt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CertAlt field is set to the value of the last call.
func (b *KongCertificateSpecApplyConfiguration) WithCertAlt(value string) *KongCertificateSpecApplyConfiguration {
	b.KongCertificateAPISpecApplyConfiguration.CertAlt = &value
	return b
}

// WithKey sets the Key field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Key field is set to the value of the last call.
func (b *KongCertificateSpecApplyConfiguration) WithKey(value string) *KongCertificateSpecApplyConfiguration {
	b.KongCertificateAPISpecApplyConfiguration.Key = &value
	return b
}

// WithKeyAlt sets the KeyAlt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KeyAlt field is set to the value of the last call.
func (b *KongCertificateSpecApplyConfiguration) WithKeyAlt(value string) *KongCertificateSpecApplyConfiguration {
	b.KongCertificateAPISpecApplyConfiguration.KeyAlt = &value
	return b
}

// WithTags sets the Tags field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tags field is set to the value of the last call.
func (b *KongCertificateSpecApplyConfiguration) WithTags(value commonv1alpha1.Tags) *KongCertificateSpecApplyConfiguration {
	b.KongCertificateAPISpecApplyConfiguration.Tags = &value
	return b
}
