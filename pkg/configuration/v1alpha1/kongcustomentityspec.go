/*
Copyright 2021 Kong, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// KongCustomEntitySpecApplyConfiguration represents a declarative configuration of the KongCustomEntitySpec type for use
// with apply.
type KongCustomEntitySpecApplyConfiguration struct {
	EntityType     *string                            `json:"type,omitempty"`
	Fields         *v1.JSON                           `json:"fields,omitempty"`
	ControllerName *string                            `json:"controllerName,omitempty"`
	ParentRef      *ObjectReferenceApplyConfiguration `json:"parentRef,omitempty"`
}

// KongCustomEntitySpecApplyConfiguration constructs a declarative configuration of the KongCustomEntitySpec type for use with
// apply.
func KongCustomEntitySpec() *KongCustomEntitySpecApplyConfiguration {
	return &KongCustomEntitySpecApplyConfiguration{}
}

// WithEntityType sets the EntityType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EntityType field is set to the value of the last call.
func (b *KongCustomEntitySpecApplyConfiguration) WithEntityType(value string) *KongCustomEntitySpecApplyConfiguration {
	b.EntityType = &value
	return b
}

// WithFields sets the Fields field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Fields field is set to the value of the last call.
func (b *KongCustomEntitySpecApplyConfiguration) WithFields(value v1.JSON) *KongCustomEntitySpecApplyConfiguration {
	b.Fields = &value
	return b
}

// WithControllerName sets the ControllerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControllerName field is set to the value of the last call.
func (b *KongCustomEntitySpecApplyConfiguration) WithControllerName(value string) *KongCustomEntitySpecApplyConfiguration {
	b.ControllerName = &value
	return b
}

// WithParentRef sets the ParentRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ParentRef field is set to the value of the last call.
func (b *KongCustomEntitySpecApplyConfiguration) WithParentRef(value *ObjectReferenceApplyConfiguration) *KongCustomEntitySpecApplyConfiguration {
	b.ParentRef = value
	return b
}
