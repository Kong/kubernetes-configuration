/*
Copyright 2021 Kong, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	commonv1alpha1 "github.com/kong/kubernetes-configuration/v2/api/common/v1alpha1"
	configurationv1alpha1 "github.com/kong/kubernetes-configuration/v2/api/configuration/v1alpha1"
)

// KongPluginBindingSpecApplyConfiguration represents a declarative configuration of the KongPluginBindingSpec type for use
// with apply.
type KongPluginBindingSpecApplyConfiguration struct {
	PluginReference *PluginRefApplyConfiguration                  `json:"pluginRef,omitempty"`
	Targets         *KongPluginBindingTargetsApplyConfiguration   `json:"targets,omitempty"`
	ControlPlaneRef *commonv1alpha1.ControlPlaneRef               `json:"controlPlaneRef,omitempty"`
	Scope           *configurationv1alpha1.KongPluginBindingScope `json:"scope,omitempty"`
}

// KongPluginBindingSpecApplyConfiguration constructs a declarative configuration of the KongPluginBindingSpec type for use with
// apply.
func KongPluginBindingSpec() *KongPluginBindingSpecApplyConfiguration {
	return &KongPluginBindingSpecApplyConfiguration{}
}

// WithPluginReference sets the PluginReference field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PluginReference field is set to the value of the last call.
func (b *KongPluginBindingSpecApplyConfiguration) WithPluginReference(value *PluginRefApplyConfiguration) *KongPluginBindingSpecApplyConfiguration {
	b.PluginReference = value
	return b
}

// WithTargets sets the Targets field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Targets field is set to the value of the last call.
func (b *KongPluginBindingSpecApplyConfiguration) WithTargets(value *KongPluginBindingTargetsApplyConfiguration) *KongPluginBindingSpecApplyConfiguration {
	b.Targets = value
	return b
}

// WithControlPlaneRef sets the ControlPlaneRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControlPlaneRef field is set to the value of the last call.
func (b *KongPluginBindingSpecApplyConfiguration) WithControlPlaneRef(value commonv1alpha1.ControlPlaneRef) *KongPluginBindingSpecApplyConfiguration {
	b.ControlPlaneRef = &value
	return b
}

// WithScope sets the Scope field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scope field is set to the value of the last call.
func (b *KongPluginBindingSpecApplyConfiguration) WithScope(value configurationv1alpha1.KongPluginBindingScope) *KongPluginBindingSpecApplyConfiguration {
	b.Scope = &value
	return b
}
