/*
Copyright 2021 Kong, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	components "github.com/Kong/sdk-konnect-go/models/components"
	commonv1alpha1 "github.com/kong/kubernetes-configuration/v2/api/common/v1alpha1"
)

// KongRouteSpecApplyConfiguration represents a declarative configuration of the KongRouteSpec type for use
// with apply.
type KongRouteSpecApplyConfiguration struct {
	ControlPlaneRef                    *commonv1alpha1.ControlPlaneRef `json:"controlPlaneRef,omitempty"`
	ServiceRef                         *ServiceRefApplyConfiguration   `json:"serviceRef,omitempty"`
	KongRouteAPISpecApplyConfiguration `json:",inline"`
}

// KongRouteSpecApplyConfiguration constructs a declarative configuration of the KongRouteSpec type for use with
// apply.
func KongRouteSpec() *KongRouteSpecApplyConfiguration {
	return &KongRouteSpecApplyConfiguration{}
}

// WithControlPlaneRef sets the ControlPlaneRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControlPlaneRef field is set to the value of the last call.
func (b *KongRouteSpecApplyConfiguration) WithControlPlaneRef(value commonv1alpha1.ControlPlaneRef) *KongRouteSpecApplyConfiguration {
	b.ControlPlaneRef = &value
	return b
}

// WithServiceRef sets the ServiceRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceRef field is set to the value of the last call.
func (b *KongRouteSpecApplyConfiguration) WithServiceRef(value *ServiceRefApplyConfiguration) *KongRouteSpecApplyConfiguration {
	b.ServiceRef = value
	return b
}

// WithDestinations adds the given value to the Destinations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Destinations field.
func (b *KongRouteSpecApplyConfiguration) WithDestinations(values ...components.Destinations) *KongRouteSpecApplyConfiguration {
	for i := range values {
		b.KongRouteAPISpecApplyConfiguration.Destinations = append(b.KongRouteAPISpecApplyConfiguration.Destinations, values[i])
	}
	return b
}

// WithHeaders puts the entries into the Headers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Headers field,
// overwriting an existing map entries in Headers field with the same key.
func (b *KongRouteSpecApplyConfiguration) WithHeaders(entries map[string][]string) *KongRouteSpecApplyConfiguration {
	if b.KongRouteAPISpecApplyConfiguration.Headers == nil && len(entries) > 0 {
		b.KongRouteAPISpecApplyConfiguration.Headers = make(map[string][]string, len(entries))
	}
	for k, v := range entries {
		b.KongRouteAPISpecApplyConfiguration.Headers[k] = v
	}
	return b
}

// WithHosts adds the given value to the Hosts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Hosts field.
func (b *KongRouteSpecApplyConfiguration) WithHosts(values ...string) *KongRouteSpecApplyConfiguration {
	for i := range values {
		b.KongRouteAPISpecApplyConfiguration.Hosts = append(b.KongRouteAPISpecApplyConfiguration.Hosts, values[i])
	}
	return b
}

// WithHTTPSRedirectStatusCode sets the HTTPSRedirectStatusCode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HTTPSRedirectStatusCode field is set to the value of the last call.
func (b *KongRouteSpecApplyConfiguration) WithHTTPSRedirectStatusCode(value components.HTTPSRedirectStatusCode) *KongRouteSpecApplyConfiguration {
	b.KongRouteAPISpecApplyConfiguration.HTTPSRedirectStatusCode = &value
	return b
}

// WithMethods adds the given value to the Methods field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Methods field.
func (b *KongRouteSpecApplyConfiguration) WithMethods(values ...string) *KongRouteSpecApplyConfiguration {
	for i := range values {
		b.KongRouteAPISpecApplyConfiguration.Methods = append(b.KongRouteAPISpecApplyConfiguration.Methods, values[i])
	}
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *KongRouteSpecApplyConfiguration) WithName(value string) *KongRouteSpecApplyConfiguration {
	b.KongRouteAPISpecApplyConfiguration.Name = &value
	return b
}

// WithPathHandling sets the PathHandling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PathHandling field is set to the value of the last call.
func (b *KongRouteSpecApplyConfiguration) WithPathHandling(value components.PathHandling) *KongRouteSpecApplyConfiguration {
	b.KongRouteAPISpecApplyConfiguration.PathHandling = &value
	return b
}

// WithPaths adds the given value to the Paths field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Paths field.
func (b *KongRouteSpecApplyConfiguration) WithPaths(values ...string) *KongRouteSpecApplyConfiguration {
	for i := range values {
		b.KongRouteAPISpecApplyConfiguration.Paths = append(b.KongRouteAPISpecApplyConfiguration.Paths, values[i])
	}
	return b
}

// WithPreserveHost sets the PreserveHost field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PreserveHost field is set to the value of the last call.
func (b *KongRouteSpecApplyConfiguration) WithPreserveHost(value bool) *KongRouteSpecApplyConfiguration {
	b.KongRouteAPISpecApplyConfiguration.PreserveHost = &value
	return b
}

// WithProtocols adds the given value to the Protocols field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Protocols field.
func (b *KongRouteSpecApplyConfiguration) WithProtocols(values ...components.RouteJSONProtocols) *KongRouteSpecApplyConfiguration {
	for i := range values {
		b.KongRouteAPISpecApplyConfiguration.Protocols = append(b.KongRouteAPISpecApplyConfiguration.Protocols, values[i])
	}
	return b
}

// WithRegexPriority sets the RegexPriority field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RegexPriority field is set to the value of the last call.
func (b *KongRouteSpecApplyConfiguration) WithRegexPriority(value int64) *KongRouteSpecApplyConfiguration {
	b.KongRouteAPISpecApplyConfiguration.RegexPriority = &value
	return b
}

// WithRequestBuffering sets the RequestBuffering field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RequestBuffering field is set to the value of the last call.
func (b *KongRouteSpecApplyConfiguration) WithRequestBuffering(value bool) *KongRouteSpecApplyConfiguration {
	b.KongRouteAPISpecApplyConfiguration.RequestBuffering = &value
	return b
}

// WithResponseBuffering sets the ResponseBuffering field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResponseBuffering field is set to the value of the last call.
func (b *KongRouteSpecApplyConfiguration) WithResponseBuffering(value bool) *KongRouteSpecApplyConfiguration {
	b.KongRouteAPISpecApplyConfiguration.ResponseBuffering = &value
	return b
}

// WithSnis adds the given value to the Snis field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Snis field.
func (b *KongRouteSpecApplyConfiguration) WithSnis(values ...string) *KongRouteSpecApplyConfiguration {
	for i := range values {
		b.KongRouteAPISpecApplyConfiguration.Snis = append(b.KongRouteAPISpecApplyConfiguration.Snis, values[i])
	}
	return b
}

// WithSources adds the given value to the Sources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Sources field.
func (b *KongRouteSpecApplyConfiguration) WithSources(values ...components.Sources) *KongRouteSpecApplyConfiguration {
	for i := range values {
		b.KongRouteAPISpecApplyConfiguration.Sources = append(b.KongRouteAPISpecApplyConfiguration.Sources, values[i])
	}
	return b
}

// WithStripPath sets the StripPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StripPath field is set to the value of the last call.
func (b *KongRouteSpecApplyConfiguration) WithStripPath(value bool) *KongRouteSpecApplyConfiguration {
	b.KongRouteAPISpecApplyConfiguration.StripPath = &value
	return b
}

// WithTags sets the Tags field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tags field is set to the value of the last call.
func (b *KongRouteSpecApplyConfiguration) WithTags(value commonv1alpha1.Tags) *KongRouteSpecApplyConfiguration {
	b.KongRouteAPISpecApplyConfiguration.Tags = &value
	return b
}
