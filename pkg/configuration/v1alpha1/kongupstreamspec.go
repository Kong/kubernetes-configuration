/*
Copyright 2021 Kong, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	components "github.com/Kong/sdk-konnect-go/models/components"
	commonv1alpha1 "github.com/kong/kubernetes-configuration/v2/api/common/v1alpha1"
)

// KongUpstreamSpecApplyConfiguration represents a declarative configuration of the KongUpstreamSpec type for use
// with apply.
type KongUpstreamSpecApplyConfiguration struct {
	ControlPlaneRef                       *commonv1alpha1.ControlPlaneRef `json:"controlPlaneRef,omitempty"`
	KongUpstreamAPISpecApplyConfiguration `json:",inline"`
}

// KongUpstreamSpecApplyConfiguration constructs a declarative configuration of the KongUpstreamSpec type for use with
// apply.
func KongUpstreamSpec() *KongUpstreamSpecApplyConfiguration {
	return &KongUpstreamSpecApplyConfiguration{}
}

// WithControlPlaneRef sets the ControlPlaneRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControlPlaneRef field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithControlPlaneRef(value commonv1alpha1.ControlPlaneRef) *KongUpstreamSpecApplyConfiguration {
	b.ControlPlaneRef = &value
	return b
}

// WithAlgorithm sets the Algorithm field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Algorithm field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithAlgorithm(value components.UpstreamAlgorithm) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.Algorithm = &value
	return b
}

// WithClientCertificate sets the ClientCertificate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientCertificate field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithClientCertificate(value components.UpstreamClientCertificate) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.ClientCertificate = &value
	return b
}

// WithHashFallback sets the HashFallback field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HashFallback field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithHashFallback(value components.HashFallback) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.HashFallback = &value
	return b
}

// WithHashFallbackHeader sets the HashFallbackHeader field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HashFallbackHeader field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithHashFallbackHeader(value string) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.HashFallbackHeader = &value
	return b
}

// WithHashFallbackQueryArg sets the HashFallbackQueryArg field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HashFallbackQueryArg field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithHashFallbackQueryArg(value string) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.HashFallbackQueryArg = &value
	return b
}

// WithHashFallbackURICapture sets the HashFallbackURICapture field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HashFallbackURICapture field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithHashFallbackURICapture(value string) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.HashFallbackURICapture = &value
	return b
}

// WithHashOn sets the HashOn field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HashOn field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithHashOn(value components.HashOn) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.HashOn = &value
	return b
}

// WithHashOnCookie sets the HashOnCookie field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HashOnCookie field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithHashOnCookie(value string) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.HashOnCookie = &value
	return b
}

// WithHashOnCookiePath sets the HashOnCookiePath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HashOnCookiePath field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithHashOnCookiePath(value string) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.HashOnCookiePath = &value
	return b
}

// WithHashOnHeader sets the HashOnHeader field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HashOnHeader field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithHashOnHeader(value string) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.HashOnHeader = &value
	return b
}

// WithHashOnQueryArg sets the HashOnQueryArg field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HashOnQueryArg field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithHashOnQueryArg(value string) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.HashOnQueryArg = &value
	return b
}

// WithHashOnURICapture sets the HashOnURICapture field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HashOnURICapture field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithHashOnURICapture(value string) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.HashOnURICapture = &value
	return b
}

// WithHealthchecks sets the Healthchecks field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Healthchecks field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithHealthchecks(value components.Healthchecks) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.Healthchecks = &value
	return b
}

// WithHostHeader sets the HostHeader field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostHeader field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithHostHeader(value string) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.HostHeader = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithName(value string) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.Name = &value
	return b
}

// WithSlots sets the Slots field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Slots field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithSlots(value int64) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.Slots = &value
	return b
}

// WithTags sets the Tags field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tags field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithTags(value commonv1alpha1.Tags) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.Tags = &value
	return b
}

// WithUseSrvName sets the UseSrvName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UseSrvName field is set to the value of the last call.
func (b *KongUpstreamSpecApplyConfiguration) WithUseSrvName(value bool) *KongUpstreamSpecApplyConfiguration {
	b.KongUpstreamAPISpecApplyConfiguration.UseSrvName = &value
	return b
}
